# Тестирование методом серого ящика
**Черный ящик** - тестирование происходит без рассмотрения кода, деталей и знаний о внутреннем устройстве ПО. Тестировщики пишут тест-кейсы, опираясь только на требования и спецификацию программного обеспечения. Максимально приближен к действиям реального пользователя. Не всегда его достаточно, потому как высока вероятность пропуска бага.
**Белый ящик** - так же прозрачный или стекляный ящик. это метод тестирования ПО, который предполагает, что "внутрянка" системы известны тестировщику. К нему относятся:

1. Unit-тестирование;

2. интеграционное;

3. системное;

4. тестирование безопасности.


**Серый ящик** - такого понятия нет в международных стандартах тестирования, но упоминание такого метода встречается достаточно часто. Представляет собой комбинацию методов черного и белого ящика( еще называется дополненный ЧЯ).
То есть при написании тест-кейсов нам известна внутренняя стркутура и алгоритмы. Но само тестировнаие будем проводиться с позиции пользователя(т.е. незнания внутренностей) Например, проверка корректности записях в БД. Для выполнения тестирования «серого ящика» нет необходимости в доступе тестировщика к исходному коду. Тесты пишутся на основе знания алгоритма, архитектуры, внутренних состояний или других высокоуровневых описаний поведения программы. Выполняются тестировщиком совместно с разработчиком, что озволяет на начальном этапе убрать избыточные тест-кейсы. Это сокращает время функционального и нефункционального тестирования и положительно влияет на общее качество продукта.

__Метод «серого ящика» используется:__

- когда нет возможности использовать «белый ящик»;

- когда необходимо более полное покрытие по сравнению с «черным ящиком».


Используя этот метод, тестировщики получают доступ к проектной документации и могут подготовить и создать более точные и полные тест-кейсы и сценарии тестирования. Наибольшая эффективность применения «серого ящика» достигается при тестировании web-приложений, web-сервисов, безопасности, GUI, а также для функционального тестирования.


__Недостатки:__

- Анализ программного кода ограничен, так как доступа к исходному коду у тестировщика нет.
- Нет времени тестировать все потоки ввода и вывода информации, так как это займет очень много времени.
- Возможна ситуация, когда тестировщики могут стать лишними (когда не только QA-специалист, но и программист проверяет свой код с помощью юнит-тестов)
